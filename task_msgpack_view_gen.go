package bokchoy

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *taskMsgpackView) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "nn":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "pl":
			z.PublishedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "PublishedAt")
				return
			}
		case "st":
			z.StartedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "StartedAt")
				return
			}
		case "pr":
			z.ProcessedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ProcessedAt")
				return
			}
		case "re":
			z.MaxRetries, err = dc.ReadInt8()
			if err != nil {
				err = msgp.WrapError(err, "MaxRetries")
				return
			}
		case "ex":
			z.ExecTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ExecTime")
				return
			}
		case "tl":
			z.TTL, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
		case "to":
			z.Timeout, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Timeout")
				return
			}
		case "et":
			z.ETA, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ETA")
				return
			}
		case "ri":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "RetryIntervals")
				return
			}
			if cap(z.RetryIntervals) >= int(zb0002) {
				z.RetryIntervals = (z.RetryIntervals)[:zb0002]
			} else {
				z.RetryIntervals = make([]int64, zb0002)
			}
			for za0001 := range z.RetryIntervals {
				z.RetryIntervals[za0001], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "RetryIntervals", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *taskMsgpackView) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "id"
	err = en.Append(0x8b, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "nn"
	err = en.Append(0xa2, 0x6e, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "pl"
	err = en.Append(0xa2, 0x70, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.PublishedAt)
	if err != nil {
		err = msgp.WrapError(err, "PublishedAt")
		return
	}
	// write "st"
	err = en.Append(0xa2, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StartedAt)
	if err != nil {
		err = msgp.WrapError(err, "StartedAt")
		return
	}
	// write "pr"
	err = en.Append(0xa2, 0x70, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ProcessedAt)
	if err != nil {
		err = msgp.WrapError(err, "ProcessedAt")
		return
	}
	// write "re"
	err = en.Append(0xa2, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt8(z.MaxRetries)
	if err != nil {
		err = msgp.WrapError(err, "MaxRetries")
		return
	}
	// write "ex"
	err = en.Append(0xa2, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ExecTime)
	if err != nil {
		err = msgp.WrapError(err, "ExecTime")
		return
	}
	// write "tl"
	err = en.Append(0xa2, 0x74, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.TTL)
	if err != nil {
		err = msgp.WrapError(err, "TTL")
		return
	}
	// write "to"
	err = en.Append(0xa2, 0x74, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timeout)
	if err != nil {
		err = msgp.WrapError(err, "Timeout")
		return
	}
	// write "et"
	err = en.Append(0xa2, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ETA)
	if err != nil {
		err = msgp.WrapError(err, "ETA")
		return
	}
	// write "ri"
	err = en.Append(0xa2, 0x72, 0x69)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.RetryIntervals)))
	if err != nil {
		err = msgp.WrapError(err, "RetryIntervals")
		return
	}
	for za0001 := range z.RetryIntervals {
		err = en.WriteInt64(z.RetryIntervals[za0001])
		if err != nil {
			err = msgp.WrapError(err, "RetryIntervals", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *taskMsgpackView) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "id"
	o = append(o, 0x8b, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ID)
	// string "nn"
	o = append(o, 0xa2, 0x6e, 0x6e)
	o = msgp.AppendString(o, z.Name)
	// string "pl"
	o = append(o, 0xa2, 0x70, 0x6c)
	o = msgp.AppendInt64(o, z.PublishedAt)
	// string "st"
	o = append(o, 0xa2, 0x73, 0x74)
	o = msgp.AppendInt64(o, z.StartedAt)
	// string "pr"
	o = append(o, 0xa2, 0x70, 0x72)
	o = msgp.AppendInt64(o, z.ProcessedAt)
	// string "re"
	o = append(o, 0xa2, 0x72, 0x65)
	o = msgp.AppendInt8(o, z.MaxRetries)
	// string "ex"
	o = append(o, 0xa2, 0x65, 0x78)
	o = msgp.AppendInt64(o, z.ExecTime)
	// string "tl"
	o = append(o, 0xa2, 0x74, 0x6c)
	o = msgp.AppendInt64(o, z.TTL)
	// string "to"
	o = append(o, 0xa2, 0x74, 0x6f)
	o = msgp.AppendInt64(o, z.Timeout)
	// string "et"
	o = append(o, 0xa2, 0x65, 0x74)
	o = msgp.AppendInt64(o, z.ETA)
	// string "ri"
	o = append(o, 0xa2, 0x72, 0x69)
	o = msgp.AppendArrayHeader(o, uint32(len(z.RetryIntervals)))
	for za0001 := range z.RetryIntervals {
		o = msgp.AppendInt64(o, z.RetryIntervals[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *taskMsgpackView) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "nn":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "pl":
			z.PublishedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PublishedAt")
				return
			}
		case "st":
			z.StartedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartedAt")
				return
			}
		case "pr":
			z.ProcessedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ProcessedAt")
				return
			}
		case "re":
			z.MaxRetries, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxRetries")
				return
			}
		case "ex":
			z.ExecTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExecTime")
				return
			}
		case "tl":
			z.TTL, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
		case "to":
			z.Timeout, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timeout")
				return
			}
		case "et":
			z.ETA, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ETA")
				return
			}
		case "ri":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RetryIntervals")
				return
			}
			if cap(z.RetryIntervals) >= int(zb0002) {
				z.RetryIntervals = (z.RetryIntervals)[:zb0002]
			} else {
				z.RetryIntervals = make([]int64, zb0002)
			}
			for za0001 := range z.RetryIntervals {
				z.RetryIntervals[za0001], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RetryIntervals", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *taskMsgpackView) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 3 + msgp.StringPrefixSize + len(z.Name) + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int8Size + 3 + msgp.Float64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.ArrayHeaderSize + (len(z.RetryIntervals) * (msgp.Int64Size))
	return
}
